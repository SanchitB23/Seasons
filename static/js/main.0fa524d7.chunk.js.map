{"version":3,"sources":["Seasons.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","src_Seasons","props","lat","month","season","Date","getMonth","_seasonConfig$season","react_default","a","createElement","className","concat","Spinner","class","message","defaultProps","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","errorMsg","state","_this$state","Component","ReactDOM","render","src_App","document","querySelector"],"mappings":"4LAUMA,SAAe,CACnBC,OAAQ,CACNC,KAAM,SACNC,SAAU,OAEZC,OAAQ,CACNF,KAAM,SACNC,SAAU,eAGCE,EAAA,SAACC,GACd,IAlBkBC,EAAKC,EAkBjBC,GAlBYF,EAkBQD,EAAMC,KAlBTC,GAkBc,IAAIE,MAAOC,YAjBpC,GAAKH,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAGrBA,EAAM,EAAI,SAAW,UAYNK,EAEGZ,EAAaS,GAAhCP,EAFgBU,EAEhBV,KAAMC,EAFUS,EAEVT,SACd,OACEU,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kBAAAC,OAAoBR,IAChCI,EAAAC,EAAAC,cAAA,KAAGC,UAAS,sBAAAC,OAAwBd,EAAxB,WACZU,EAAAC,EAAAC,cAAA,UAAKb,GACLW,EAAAC,EAAAC,cAAA,KAAGC,UAAS,oBAAAC,OAAsBd,EAAtB,aCzBH,SAASe,EAAQZ,GAC5B,OACIO,EAAAC,EAAAC,cAAA,OAAKI,MAAM,oBACPN,EAAAC,EAAAC,cAAA,OAAKI,MAAM,kBAAkBb,EAAMc,UAK/CF,EAAQG,aAAe,CACnBD,QAAS,qDCNQE,cACjB,SAAAA,EAAYhB,GAAO,IAAAiB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMpB,KAMVwB,kBAAoB,WAChBC,OAAOC,UAAUC,YAAYC,mBACzB,SAACC,GAAD,OAAcZ,EAAKa,SAAS,CAAE7B,IAAK4B,EAASE,OAAOC,YACnD,SAACC,GAAD,OAAShB,EAAKa,SAAS,CAAEI,SAAUD,EAAInB,aAP3CG,EAAKkB,MAAQ,CACTlC,IAAK,KAAMiC,SAAU,IAJVjB,wEAcV,IAAAmB,EACqBhB,KAAKe,MAAvBlC,EADHmC,EACGnC,IAAKiC,EADRE,EACQF,SACb,OAAKjC,GAAOiC,EACD3B,EAAAC,EAAAC,cAAA,WAAMyB,GAEbjC,IAAQiC,EACD3B,EAAAC,EAAAC,cAACV,EAAD,CAASE,IAAKA,IAElBM,EAAAC,EAAAC,cAACG,EAAD,CAASE,QAAQ,0CAvBCuB,aA2BjCC,IAASC,OACLhC,EAAAC,EAAAC,cAAC+B,EAAD,MACAC,SAASC,cAAc","file":"static/js/main.0fa524d7.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Seasons.css';\r\n\r\nconst getSeasons = (lat, month) => {\r\n  if (month > 2 && month < 9) {\r\n    return lat > 0 ? 'summer' : 'winter';\r\n  }\r\n  else\r\n    return lat > 0 ? 'winter' : 'summer';\r\n}\r\nconst seasonConfig = {\r\n  summer: {\r\n    text: 'Summer',\r\n    iconName: 'sun'\r\n  },\r\n  winter: {\r\n    text: 'Winter',\r\n    iconName: 'snowflake'\r\n  }\r\n}\r\nexport default (props) => {\r\n  const season = getSeasons(props.lat, new Date().getMonth());\r\n  const { text, iconName } = seasonConfig[season];\r\n  return (\r\n    <div className={`season-display ${season}`}>\r\n      <i className={`icon-start massive ${iconName} icon`}></i>\r\n      <h1>{text}</h1>\r\n      <i className={`icon-end massive ${iconName} icon`}></i>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\n\r\nexport default function Spinner(props) {\r\n    return (\r\n        <div class=\"ui active dimmer\">\r\n            <div class=\"ui text loader\">{props.message}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nSpinner.defaultProps = {\r\n    message: 'Loading'\r\n}\r\n","import React, { Component } from 'react'\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport Seasons from './Seasons';\r\nimport Spinner from './Spinner';\r\nexport default class App extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            lat: null, errorMsg: ''\r\n        }\r\n    }\r\n    componentDidMount = () => {\r\n        window.navigator.geolocation.getCurrentPosition(\r\n            (position) => this.setState({ lat: position.coords.latitude }),\r\n            (err) => this.setState({ errorMsg: err.message })\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { lat, errorMsg } = this.state;\r\n        if (!lat && errorMsg) {\r\n            return <div>{errorMsg}</div>\r\n        }\r\n        if (lat && !errorMsg) {\r\n            return <Seasons lat={lat} />\r\n        }\r\n        return <Spinner message='Please Accept Location Request' />\r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.querySelector('#root')\r\n)"],"sourceRoot":""}